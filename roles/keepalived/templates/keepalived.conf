global_defs {
    vrrp_mcast_group4 {{ multicast_ipv4 }}
    script_user root
    enable_script_security
}

vrrp_sync_group VG1 {
    group {
{% for vlan in vip.keys() %}
        VLAN_{{ vlan | upper }}
{% endfor %}
    }
{% for i in ['master', 'backup', 'fault'] %}
    notify_{{ i }} "/usr/libexec/keepalived/notify_script.sh {{ i }}"
{% endfor %}
}

{% for vlan in vip.keys() %}
vrrp_instance VLAN_{{ vlan | upper }} {
{# managed_interface is the interface where we are moving the ip #}
{% set managed_interface = vip[vlan]['interface'] %}
    state {% if is_master %}MASTER
    {% else %}BACKUP
    {% endif -%}
    interface {{ managed_interface }}
    virtual_router_id {{ loop.index }}
    priority {% if is_master %}100
    {% else %}50
    {% endif -%}
    advert_int 1
    authentication {
        auth_type PASS
        auth_pass {{ password }}
    }
    virtual_ipaddress {
        {{ vip[vlan]['address'] }}/{{ vip[vlan]['prefix'] }}
    }

{% set address = vip[vlan]['address'] %}
{# only 1 peer is used anyway, fix this if we do keepalived with more than 1 host #}
{% set peer = groups[group] | reject('equalto', inventory_hostname) | first  %}
{% set communication_interface = hostvars[peer]['vip_copy'][vlan]['interface'] %}

{% if address | ansible.utils.ipv6 %}
  {% set ip_type = 'ipv6' %}
  {% set ipv6_addresses = hostvars[inventory_hostname]['ansible_' + managed_interface][ip_type] %}
  {% set unicast_src_ip = ( ipv6_addresses | selectattr('scope', 'equalto', 'global') | rejectattr('address', 'equalto', address) | first )['address'] %}
  {% set unicast_peer = ( hostvars[peer]['ansible_' + communication_interface][ip_type] | selectattr('scope', 'equalto', 'global') | rejectattr('address', 'equalto', address) | first )['address'] %}
{% else %}
  {% set ip_type = 'ipv4' %}
  {% set unicast_src_ip = hostvars[inventory_hostname]['ansible_' + managed_interface][ip_type]['address'] %}
  {% set unicast_peer = hostvars[peer]['ansible_' + communication_interface][ip_type]['address'] %}
{% endif %}

    unicast_src_ip {{ unicast_src_ip }}
    unicast_peer {
        {{ unicast_peer }}
   }
}
{% endfor %}
